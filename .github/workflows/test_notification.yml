name: 99_test_Notification

on:
  workflow_dispatch:
    inputs:
      debug_build:
        description: 'Debug build: single-thread + verbose logs'
        type: boolean
        required: false
        default: false
      jobs:
        description: 'Parallel jobs: auto=nproc, or fixed number'
        type: choice
        required: false
        default: auto
        options:
          - auto
          - "1"
          - "2"
          - "4"
          - "8"
          - "16"
      model:
        description: 'Select model to build'
        type: choice
        required: false
        default: all
        options:
          - all
          - cr6606
          - tr3000
      immortalwrt_ref:
        description: 'ImmortalWrt git ref (branch, tag, or commit SHA)'
        type: string
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.model || 'all' }}-${{ (github.event.inputs.immortalwrt_ref && github.event.inputs.immortalwrt_ref) || (vars.IMMORTALWRT_REF && vars.IMMORTALWRT_REF) || 'default' }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  IMMORTALWRT_REF: ${{ github.event.inputs.immortalwrt_ref || vars.IMMORTALWRT_REF }}
  DEBUG_BUILD: ${{ github.event.inputs.debug_build || 'false' }}
  JOBS_INPUT: ${{ github.event.inputs.jobs || 'auto' }}
  CCACHE_MAX_SIZE: 2G
  # Notification settings
  BARK_SUCCESS_SOUND: "birdsong"
  BARK_FAILURE_SOUND: "calypso"
  BARK_ICON: "https://firmware-selector.immortalwrt.org/favicon.ico"
  BARK_GROUP: "TEST"

jobs:
  notify-completion-success:
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    steps:
      - name: Notify via Bark
        if: always()
        uses: harryzcy/action-bark@v2.3.0
        with:
          status: success
          on_status: success, failure, cancelled, skipped
          title: "success"
          body: "success"
          bark_server_url: ${{ secrets.BARK_SERVER_URL }}
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: active
          sound: ${{ ((needs.release.result == 'success') || (needs.build.result == 'success')) && env.BARK_SUCCESS_SOUND || env.BARK_FAILURE_SOUND }}
          icon: ${{ env.BARK_ICON }}
          group: ${{ env.BARK_GROUP }}

  notify-completion-failed:
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    steps:
      - name: Notify via Bark
        if: always()
        uses: harryzcy/action-bark@v2.3.0
        with:
          status: failure
          on_status: success, failure, cancelled, skipped
          title: "failure"
          body: "failure"
          bark_server_url: ${{ secrets.BARK_SERVER_URL }}
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: active
          sound: ${{ ((needs.release.result == 'success') || (needs.build.result == 'success')) && env.BARK_SUCCESS_SOUND || env.BARK_FAILURE_SOUND }}
          icon: ${{ env.BARK_ICON }}
          group: ${{ env.BARK_GROUP }}

  notify-completion-cancelled:
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    steps:
      - name: Notify via Bark
        if: always()
        uses: harryzcy/action-bark@v2.3.0
        with:
          status: cancelled
          on_status: success, failure, cancelled, skipped
          title: "cancelled"
          body: "cancelled"
          bark_server_url: ${{ secrets.BARK_SERVER_URL }}
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: active
          sound: ${{ ((needs.release.result == 'success') || (needs.build.result == 'success')) && env.BARK_SUCCESS_SOUND || env.BARK_FAILURE_SOUND }}
          icon: ${{ env.BARK_ICON }}
          group: ${{ env.BARK_GROUP }}

  notify-completion-skipped:
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    steps:
      - name: Notify via Bark
        if: always()
        uses: harryzcy/action-bark@v2.3.0
        with:
          status: skipped
          on_status: success, failure, cancelled, skipped
          title: "skipped"
          body: "skipped"
          bark_server_url: ${{ secrets.BARK_SERVER_URL }}
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: active
          sound: ${{ ((needs.release.result == 'success') || (needs.build.result == 'success')) && env.BARK_SUCCESS_SOUND || env.BARK_FAILURE_SOUND }}
          icon: ${{ env.BARK_ICON }}
          group: ${{ env.BARK_GROUP }}
