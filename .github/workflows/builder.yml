name: ImmortalWrt Builder

on:
  workflow_dispatch:
    inputs:
      upload_release:
        description: 'Upload firmware artifacts and publish GitHub Release'
        type: boolean
        required: false
        default: true
      debug_build:
        description: 'Debug build: single-thread + verbose logs'
        type: boolean
        required: false
        default: false
      jobs:
        description: 'Parallel jobs: auto=nproc, or fixed number'
        type: choice
        required: false
        default: auto
        options:
          - auto
          - "1"
          - "2"
          - "4"
          - "8"
          - "16"
      model:
        description: 'Select model to build'
        type: choice
        required: false
        default: all
        options:
          - all
          - cr6606
          - tr3000

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  IMMORTALWRT_REF: ${{ vars.IMMORTALWRT_REF }}
  UPLOAD_RELEASE: ${{ github.event.inputs.upload_release || 'true' }}
  DEBUG_BUILD: ${{ github.event.inputs.debug_build || 'false' }}
  JOBS_INPUT: ${{ github.event.inputs.jobs || 'auto' }}
  CCACHE_MAX_SIZE: 4G
  # Notification settings
  BARK_SUCCESS_SOUND: "birdsong"
  BARK_FAILURE_SOUND: "calypso"
  BARK_ICON: "https://firmware-selector.immortalwrt.org/favicon.ico"
  BARK_GROUP: "ImmortalWrt"

jobs:
  build:
    name: Build (${{ matrix.model }})
    permissions:
      contents: read
      actions: write
    runs-on: ubuntu-latest
    container: ghcr.io/coachpo/immortalwrt-build-env:latest
    strategy:
      fail-fast: false
      matrix:
        model: ${{ fromJSON((github.event.inputs.model == '' || github.event.inputs.model == 'all') && '["cr6606","tr3000"]' || format('["{0}"]', github.event.inputs.model)) }}

    steps:
    - name: Checkout repository (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1
        
    - name: Restore ccache cache (per model/ref)
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ matrix.model }}-${{ env.IMMORTALWRT_REF }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ matrix.model }}-
          ${{ runner.os }}-ccache-

    - name: Restore ImmortalWrt downloads cache (per model/ref)
      uses: actions/cache@v4
      with:
        path: immortalwrt/dl
        key: ${{ runner.os }}-dl-${{ matrix.model }}-${{ env.IMMORTALWRT_REF }}
        restore-keys: |
          ${{ runner.os }}-dl-${{ matrix.model }}-
          ${{ runner.os }}-dl-

    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        ccache -M ${CCACHE_MAX_SIZE}

    - name: Restore feeds cache (per ref + feeds.conf)
      uses: actions/cache@v4
      with:
        path: immortalwrt/feeds
        key: ${{ runner.os }}-feeds-${{ hashFiles('immortalwrt/feeds.conf.default') }}-${{ env.IMMORTALWRT_REF }}
        restore-keys: |
          ${{ runner.os }}-feeds-

    - name: Update feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd immortalwrt
        ./scripts/feeds install -a

    - name: Prepare model config
      run: |
        cp "${{ matrix.model }}/seed.config" immortalwrt/.config

    - name: Compute seed hash (for build caches)
      id: seed
      run: |
        HASH=$(sha256sum "${{ matrix.model }}/seed.config" | cut -d ' ' -f1)
        echo "SEED_HASH=$HASH" >> $GITHUB_ENV
        echo "seed_hash=$HASH" >> $GITHUB_OUTPUT

    - name: Generate config
      run: |
        cd immortalwrt
        make defconfig

    - name: Restore toolchain caches (per model/ref)
      uses: actions/cache@v4
      with:
        path: |
          immortalwrt/staging_dir/toolchain-*
          immortalwrt/build_dir/toolchain-*
        key: ${{ runner.os }}-toolchain-${{ matrix.model }}-${{ env.IMMORTALWRT_REF }}
        restore-keys: |
          ${{ runner.os }}-toolchain-${{ matrix.model }}-

    - name: Restore target caches (per model/ref/seed)
      uses: actions/cache@v4
      with:
        path: |
          immortalwrt/staging_dir/target-*
          immortalwrt/build_dir/target-*
        key: ${{ runner.os }}-target-${{ matrix.model }}-${{ env.IMMORTALWRT_REF }}-${{ steps.seed.outputs.seed_hash }}
        restore-keys: |
          ${{ runner.os }}-target-${{ matrix.model }}-${{ env.IMMORTALWRT_REF }}-
          ${{ runner.os }}-target-${{ matrix.model }}-

    - name: Restore host tools cache (per ref)
      uses: actions/cache@v4
      with:
        path: immortalwrt/build_dir/host
        key: ${{ runner.os }}-host-${{ env.IMMORTALWRT_REF }}
        restore-keys: |
          ${{ runner.os }}-host-

    - name: Compile the firmware
      id: compile
      run: |
        cd immortalwrt
        if [ "${DEBUG_BUILD}" = "true" ]; then
          JOBS=1
        else
          if [ "${JOBS_INPUT}" = "auto" ] || [ -z "${JOBS_INPUT}" ]; then
            JOBS=$(nproc)
          else
            JOBS="${JOBS_INPUT}"
          fi
        fi
        echo -e "${JOBS} thread compile"
        if [ "${DEBUG_BUILD}" = "true" ]; then VERBOSE_FLAG='V=sc'; else VERBOSE_FLAG=''; fi
        make -j"${JOBS}" ${VERBOSE_FLAG} \
          || make -j1 ${VERBOSE_FLAG} \
          || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "file_date=_$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: ${{ !cancelled() }}
      run: df -hT

    - name: Collect firmware files
      id: collect
      run: |
        if [ "${{ matrix.model }}" = "tr3000" ]; then
          dir="immortalwrt/bin/targets/mediatek/filogic"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-bl31-uboot.fip" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-initramfs-recovery.itb" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-preloader.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-squashfs-sysupgrade.itb" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod.manifest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          dir="immortalwrt/bin/targets/ramips/mt7621"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-initramfs-kernel.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-squashfs-firmware.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-squashfs-sysupgrade.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606.manifest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Upload firmware files
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.upload_release == 'true' && !cancelled() }}
      with:
        name: immortalwrt_firmware_${{ matrix.model }}${{ steps.compile.outputs.file_date }}
        path: ${{ steps.collect.outputs.files }}
        retention-days: 30
        
  release:
    if: ${{ always() && needs.build.result == 'success' && github.event.inputs.upload_release == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.tag.outputs.release_tag }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare release files directory
        run: |
          mkdir -p release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: Organize release files by model
        run: |
          mkdir -p release/tr3000 release/cr6606
          # TR3000 files
          find release -type f \( -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.fip' -o -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.itb' -o -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.bin' -o -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.manifest' \) -exec cp -f {} release/tr3000/ \;
          # CR6606 files
          find release -type f \( -name 'immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-*.bin' -o -name 'immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606*.manifest' \) -exec cp -f {} release/cr6606/ \;

      - name: Generate release tag
        id: tag
        run: |
          VERSION_PREFIXED="immortalwrt-${IMMORTALWRT_REF:-unknown}"
          VERSION_SAFE="$(echo "$VERSION_PREFIXED" | sed 's/[^A-Za-z0-9._-]/_/g')"
          DATE_TAG="$(date +"%Y%m%d-%H%M")"
          echo "release_tag=${VERSION_SAFE}-build${GITHUB_RUN_NUMBER}-${DATE_TAG}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Summarize artifacts
        run: |
          printf "Artifacts included in release (by model):\n\ntr3000:\n" > release.txt
          ls -lh release/tr3000 || true >> release.txt
          printf "\ncr6606:\n" >> release.txt
          ls -lh release/cr6606 || true >> release.txt

      - name: Upload firmware to release (combined)
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            release/tr3000/*
            release/cr6606/*

  notify-completion:
    runs-on: ubuntu-latest
    needs: [ build, release ]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Notify via Bark
        if: always()
        uses: harryzcy/action-bark@v2.3.0
        with:
          status: ${{ env.UPLOAD_RELEASE == 'true' && needs.release.result || needs.build.result }}
          on_status: success, failure, cancelled
          title: "${{ ((env.UPLOAD_RELEASE == 'true' && needs.release.result == 'success') || (env.UPLOAD_RELEASE != 'true' && needs.build.result == 'success')) && '🚀 ImmortalWrt: Success' || '❌ ImmortalWrt: Failed' }}"
          body: "${{ (env.UPLOAD_RELEASE == 'true' && needs.release.result == 'success') && '✅ Build + Release completed successfully!' || (env.UPLOAD_RELEASE != 'true' && needs.build.result == 'success') && '✅ Build completed successfully!' || format('💥 Failed: build={0}, release={1}', needs.build.result, needs.release.result) }}"
          bark_server_url: ${{ secrets.BARK_SERVER_URL }}
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: active
          sound: ${{ ((env.UPLOAD_RELEASE == 'true' && needs.release.result == 'success') || (env.UPLOAD_RELEASE != 'true' && needs.build.result == 'success')) && env.BARK_SUCCESS_SOUND || env.BARK_FAILURE_SOUND }}
          icon: ${{ env.BARK_ICON }}
          group: ${{ env.BARK_GROUP }}
