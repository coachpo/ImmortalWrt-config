name: ImmortalWrt Builder

on:
  workflow_dispatch:
    inputs:
      upload_release:
        description: 'Upload firmware artifacts and publish GitHub Release'
        type: boolean
        required: false
        default: true
      debug_build:
        description: 'Debug build: single-thread + verbose logs'
        type: boolean
        required: false
        default: false
      jobs:
        description: 'Parallel jobs: auto=nproc, or fixed number'
        type: choice
        required: false
        default: auto
        options:
          - auto
          - "1"
          - "2"
          - "4"
          - "8"
          - "16"
      model:
        description: 'Select model to build'
        type: choice
        required: false
        default: all
        options:
          - all
          - cr6606
          - tr3000

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  IMMORTALWRT_TAG: ${{ vars.IMMORTALWRT_TAG }}
  UPLOAD_RELEASE: ${{ github.event.inputs.upload_release || 'true' }}
  DEBUG_BUILD: ${{ github.event.inputs.debug_build || 'false' }}
  JOBS_INPUT: ${{ github.event.inputs.jobs || 'auto' }}
  CCACHE_MAX_SIZE: 4G
  # Notification settings
  BARK_SERVER_URL: ${{ secrets.BARK_SERVER_URL }}
  BARK_SUCCESS_SOUND: "birdsong"
  BARK_FAILURE_SOUND: "calypso"
  BARK_ICON: "https://firmware-selector.immortalwrt.org/favicon.ico"
  BARK_GROUP: "ImmortalWrt"

jobs:
  build:
    name: Build (${{ matrix.model }})
    permissions:
      contents: read
      actions: write
    runs-on: ubuntu-latest
    container: ghcr.io/coachpo/immortalwrt-firmware-builder-ci:latest
    strategy:
      fail-fast: false
      matrix:
        model: ${{ fromJSON((github.event.inputs.model == '' || github.event.inputs.model == 'all') && '["cr6606","tr3000"]' || format('["{0}"]', github.event.inputs.model)) }}

    steps:
    - name: Checkout repository (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Ensure workspace
      run: |
        mkdir -p /workdir || true

    - name: Setup 6G swap
      if: runner.os == 'Linux'
      continue-on-error: true
      run: |
        if [ -f /swapfile ]; then
          swapon --show || true
          exit 0
        fi
        if ! fallocate -l 6G /swapfile 2>/dev/null; then
          dd if=/dev/zero of=/swapfile bs=1M count=6144
        fi
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        swapon --show || true
        free -h || true

    - name: Restore ccache cache (per model/tag)
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ matrix.model }}-${{ env.IMMORTALWRT_TAG }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ matrix.model }}-
          ${{ runner.os }}-ccache-

    - name: Restore OpenWrt downloads cache (per model/tag)
      uses: actions/cache@v4
      with:
        path: immortalwrt/dl
        key: ${{ runner.os }}-dl-${{ matrix.model }}-${{ env.IMMORTALWRT_TAG }}
        restore-keys: |
          ${{ runner.os }}-dl-${{ matrix.model }}-
          ${{ runner.os }}-dl-

    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        ccache -M ${CCACHE_MAX_SIZE}

    - name: Pin immortalwrt submodule to tag
      run: |
        # Ensure submodule has tags and is on requested tag
        git -C immortalwrt remote -v || true
        git -C immortalwrt fetch origin --force --prune --depth=1 tag "${IMMORTALWRT_TAG}" || true
        git -C immortalwrt checkout -f "tags/${IMMORTALWRT_TAG}"
        git -C immortalwrt reset --hard "tags/${IMMORTALWRT_TAG}"

    - name: Update feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd immortalwrt
        ./scripts/feeds install -a

    - name: Prepare model config
      run: |
        cp "${{ matrix.model }}/seed.config" immortalwrt/.config

    - name: Generate config
      run: |
        cd immortalwrt
        make defconfig

    - name: Compile the firmware
      id: compile
      run: |
        cd immortalwrt
        if [ "${DEBUG_BUILD}" = "true" ]; then
          JOBS=1
        else
          if [ "${JOBS_INPUT}" = "auto" ] || [ -z "${JOBS_INPUT}" ]; then
            JOBS=$(nproc)
          else
            JOBS="${JOBS_INPUT}"
          fi
        fi
        echo -e "${JOBS} thread compile"
        if [ "${DEBUG_BUILD}" = "true" ]; then VERBOSE_FLAG='V=sc'; else VERBOSE_FLAG=''; fi
        make -j"${JOBS}" ${VERBOSE_FLAG} \
          || make -j1 ${VERBOSE_FLAG} \
          || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "file_date=_$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: ${{ !cancelled() }}
      run: df -hT

    - name: Collect firmware files
      id: collect
      run: |
        if [ "${{ matrix.model }}" = "tr3000" ]; then
          dir="immortalwrt/bin/targets/mediatek/filogic"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-bl31-uboot.fip" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-initramfs-recovery.itb" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-preloader.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-squashfs-sysupgrade.itb" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod.manifest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          dir="immortalwrt/bin/targets/ramips/mt7621"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-initramfs-kernel.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-squashfs-firmware.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-squashfs-sysupgrade.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606.manifest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Upload firmware files
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.upload_release == 'true' && !cancelled() }}
      with:
        name: immortalwrt_firmware_${{ matrix.model }}${{ steps.compile.outputs.file_date }}
        path: ${{ steps.collect.outputs.files }}
        retention-days: 30
        
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: ${{ github.event.inputs.upload_release == 'true' && !cancelled() }}
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: ${{ always() && needs.build.result == 'success' && github.event.inputs.upload_release == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.tag.outputs.release_tag }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare release files directory
        run: |
          mkdir -p release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: Organize release files by model
        run: |
          mkdir -p release/tr3000 release/cr6606
          # TR3000 files
          find release -type f \( -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.fip' -o -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.itb' -o -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.bin' -o -name 'immortalwrt-mediatek-filogic-cudy_tr3000-*.manifest' \) -exec cp -f {} release/tr3000/ \;
          # CR6606 files
          find release -type f \( -name 'immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-*.bin' -o -name 'immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606*.manifest' \) -exec cp -f {} release/cr6606/ \;

      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Summarize artifacts
        run: |
          echo "Artifacts included in release (by model):" > release.txt
          echo "\ntr3000:" >> release.txt
          ls -lh release/tr3000 || true >> release.txt
          echo "\ncr6606:" >> release.txt
          ls -lh release/cr6606 || true >> release.txt

      - name: Upload firmware to release (combined)
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            release/tr3000/*
            release/cr6606/*

  notify-completion:
    runs-on: ubuntu-latest
    needs: [ build, release ]
    if: always()
    steps:
      - name: Send workflow completion notification via Bark
        shell: bash
        run: |
          BUILD_STATUS="${{ needs.build.result }}"
          RELEASE_STATUS="${{ needs.release.result }}"
          TAG="${{ needs.release.outputs.release_tag }}"

          if [ -z "${BARK_SERVER_URL}" ]; then
            echo "BARK_SERVER_URL not set; skipping notification."
            exit 0
          fi

          # If releases are disabled, skip notifying on successful builds
          if [ "${UPLOAD_RELEASE}" != "true" ]; then
            if [ "$BUILD_STATUS" = "success" ]; then
              echo "Releases disabled; build succeeded; skipping notification."
              exit 0
            fi
          fi

          if [ "$BUILD_STATUS" = "success" ] && [ "$RELEASE_STATUS" = "success" ]; then
            REPO="${GITHUB_REPOSITORY}"
            RELEASE_URL="https://github.com/${REPO}/releases/tag/${TAG}"
            TITLE="🚀 ImmortalWrt: Release Ready"
            BODY="Tag: ${TAG} | [Open Release](${RELEASE_URL})"
            ENC_TITLE=$(python3 -c "import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))" "$TITLE")
            ENC_BODY=$(python3 -c "import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))" "$BODY")
            curl -sS -X POST "${{ env.BARK_SERVER_URL }}/${ENC_TITLE}/${ENC_BODY}" \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "${{ env.BARK_SUCCESS_SOUND }}",
                "icon": "${{ env.BARK_ICON }}",
                "group": "${{ env.BARK_GROUP }}"
              }'
          elif [ "$BUILD_STATUS" = "success" ] && [ "$RELEASE_STATUS" != "success" ]; then
            TITLE="⚠️ ImmortalWrt: Partial"
            BODY="Build ok; release: ${RELEASE_STATUS}"
            ENC_TITLE=$(python3 -c "import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))" "$TITLE")
            ENC_BODY=$(python3 -c "import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))" "$BODY")
            curl -sS -X POST "${{ env.BARK_SERVER_URL }}/${ENC_TITLE}/${ENC_BODY}" \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "${{ env.BARK_FAILURE_SOUND }}",
                "icon": "${{ env.BARK_ICON }}",
                "group": "${{ env.BARK_GROUP }}"
              }'
          else
            TITLE="❌ ImmortalWrt: Failed"
            BODY="Build: ${BUILD_STATUS} | Release: ${RELEASE_STATUS}"
            ENC_TITLE=$(python3 -c "import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))" "$TITLE")
            ENC_BODY=$(python3 -c "import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))" "$BODY")
            curl -sS -X POST "${{ env.BARK_SERVER_URL }}/${ENC_TITLE}/${ENC_BODY}" \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "${{ env.BARK_FAILURE_SOUND }}",
                "icon": "${{ env.BARK_ICON }}",
                "group": "${{ env.BARK_GROUP }}"
              }'
          fi

