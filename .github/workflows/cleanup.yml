name: Cleanup

on:
  schedule:
    # Run every day at 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  actions: write
  contents: write

jobs:
  cleanup-workflow-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          retain_days: 0
          keep_minimum_runs: 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove old Releases (exclude cache-*)
        uses: actions/github-script@v7
        with:
          script: |
            const keepLatest = 3;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const releases = await github.paginate(github.rest.repos.listReleases, {
              owner,
              repo,
              per_page: 100,
            });
            const nonCache = releases.filter(r => !(r.tag_name || '').startsWith('cache-'));
            nonCache.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const toDelete = nonCache.slice(keepLatest);
            core.info(`Found ${releases.length} releases, ${nonCache.length} non-cache; deleting ${toDelete.length} old releases (keeping ${keepLatest}).`);
            for (const rel of toDelete) {
              try {
                await github.rest.repos.deleteRelease({ owner, repo, release_id: rel.id });
                core.info(`Deleted release ${rel.tag_name || rel.id}`);
              } catch (e) {
                core.warning(`Failed to delete release ${rel.tag_name || rel.id}: ${e.message}`);
              }
              if (rel.tag_name) {
                try {
                  await github.rest.git.deleteRef({ owner, repo, ref: `tags/${rel.tag_name}` });
                  core.info(`Deleted tag ${rel.tag_name}`);
                } catch (e) {
                  core.warning(`Failed to delete tag ${rel.tag_name}: ${e.message}`);
                }
              }
            }
