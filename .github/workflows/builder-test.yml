name: ImmortalWrt Builder Test

on:
  workflow_dispatch:
    inputs:
      debug_build:
        description: 'Debug build: single-thread + verbose logs'
        type: boolean
        required: false
        default: false
      jobs:
        description: 'Parallel jobs: auto=nproc, or fixed number'
        type: choice
        required: false
        default: auto
        options:
          - auto
          - "1"
          - "2"
          - "4"
          - "8"
          - "16"
      model:
        description: 'Select model to build'
        type: choice
        required: false
        default: all
        options:
          - all
          - cr6606
          - tr3000

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  IMMORTALWRT_TAG: ${{ vars.IMMORTALWRT_TAG }}
  DEBUG_BUILD: ${{ github.event.inputs.debug_build || 'false' }}
  JOBS_INPUT: ${{ github.event.inputs.jobs || 'auto' }}

jobs:
  build:
    name: Build (${{ matrix.model }})
    permissions:
      contents: read
      actions: write
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        model: ${{ fromJSON((github.event.inputs.model == '' || github.event.inputs.model == 'all') && '["cr6606","tr3000"]' || format('["{0}"]', github.event.inputs.model)) }}
        include:
          - model: cr6606
            container: ghcr.io/openwrt/buildbot/buildworker-v3.8.0:v9
          - model: tr3000
            container: ghcr.io/openwrt/buildbot/buildworker-v3.8.0:v9

    steps:
    - name: Checkout repository (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Pin immortalwrt submodule to tag
      run: |
        # Ensure submodule has tags and is on requested tag
        git -C immortalwrt remote -v || true
        git -C immortalwrt fetch origin --force --prune --depth=1 tag "${IMMORTALWRT_TAG}" || true
        git -C immortalwrt checkout -f "tags/${IMMORTALWRT_TAG}"
        git -C immortalwrt reset --hard "tags/${IMMORTALWRT_TAG}"


    - name: Update feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd immortalwrt
        ./scripts/feeds install -a
    - name: Prepare model config
      run: |
        cp "${{ matrix.model }}/seed.config" immortalwrt/.config

    - name: Generate config
      run: |
        cd immortalwrt
        make defconfig

    - name: Compile the firmware
      id: compile
      run: |
        cd immortalwrt
        if [ "${DEBUG_BUILD}" = "true" ]; then
          JOBS=1
        else
          if [ "${JOBS_INPUT}" = "auto" ] || [ -z "${JOBS_INPUT}" ]; then
            JOBS=$(nproc)
          else
            JOBS="${JOBS_INPUT}"
          fi
        fi
        echo -e "${JOBS} thread compile"
        if [ "${DEBUG_BUILD}" = "true" ]; then VERBOSE_FLAG='V=sc'; else VERBOSE_FLAG=''; fi
        make -j"${JOBS}" ${VERBOSE_FLAG} \
          || make -j1 ${VERBOSE_FLAG} \
          || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "file_date=_$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

    
    - name: Collect firmware files
      id: collect
      run: |
        if [ "${{ matrix.model }}" = "tr3000" ]; then
          dir="immortalwrt/bin/targets/mediatek/filogic"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-bl31-uboot.fip" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-initramfs-recovery.itb" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-preloader.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod-squashfs-sysupgrade.itb" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-mediatek-filogic-cudy_tr3000-v1-ubootmod.manifest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          dir="immortalwrt/bin/targets/ramips/mt7621"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-initramfs-kernel.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-squashfs-firmware.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606-squashfs-sysupgrade.bin" >> $GITHUB_OUTPUT
          echo "$dir/immortalwrt-ramips-mt7621-xiaomi_mi-router-cr6606.manifest" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Upload firmware files
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt_firmware_${{ matrix.model }}${{ steps.compile.outputs.file_date }}
        path: ${{ steps.collect.outputs.files }}
        retention-days: 30
